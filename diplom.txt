Выбор программного обеспечения для разработки

// приложу ссылки на библиотеки у заголовков, вдруг понадобятся

Для разработки интерактивного веб-приложения, подразумевающего под собой взаимодействие пользователя со множеством элементов и компонентов страницы, стоит внимательно и осознанно подойти к выбору программного обеспечения, технологий и библиотек, используемых для создания приложения. В первую очередь стоит определить основной стек технологий, необходимых для первоначального запуска и работы приложения.

Первостепенно для выбора технологий для разработки стоит обратить внимание на функционал, который будет выполняться в приложении. Для разработки одностраничных веб-сайтов (лэндингов) хорошо подходят конструкторы сайтов, такие как: WordPress, Tilda, Wix и т.д., так как не требуют высоких навыков программирования, и имеют низкий порог вхождения. Данные сервисы представляют собой конструктор сайта с заготовленными блоками и компонентами, и возможностью их кастомизации. Но подобные сервисы имеют несколько критических, в нашем случае, минусов – конструкторы сайтов имеют ограниченный функционал и не позволяют полностью управлять логикой и взаимодействием компонентов, как это требуется для нашего веб-приложения. Так же для соответствия дизайну и дизайн системе в проекте должна присутствовать возможность полной настройки и создания компонентов самостоятельно, иначе консистентность и соответствие дизайны макетам будут нарушены. Поэтому стоит обратить внимание на другие технологии, такие как: HTML и CSS. HTML (Hyper Text Markup Language) - это язык разметки, используемый для создания и структурирования веб-страниц. Он состоит из серии тегов, которые определяют структуру и содержимое страницы, такие как заголовки, абзацы, изображения, ссылки и другие элементы. HTML-код интерпретируется браузером и отображается пользователю в виде веб-страницы. CSS (Cascading Style Sheets) — это язык таблиц стилей, который используется для оформления и внешнего оформления веб-страниц, созданных с помощью HTML. CSS определяет внешний вид элементов HTML, таких как цвета, шрифты, размеры, расположение и другие аспекты дизайна. Он позволяет разделять структуру и содержимое страницы от ее стилизации, что обеспечивает более гибкое и масштабируемое управление оформлением. CSS-правила применяются к элементам HTML с помощью селекторов, указывающих, на какие элементы должны быть применены определенные стили. Эти два инструмента прекрасно подходят, чтобы решить задачу полноценной настройки и кастомизации компонентов дизайн системы. HTML создает разметку, а CSS описывает для неё стили: расположение элементов, цвета, формы и так далее. Чтобы решить проблему ограничения функциональности, которая присутствует в конструкторах сайтов, обратим внимание на язык программирования JavaScript. Этот язык отвечает за всё взаимодействие и интерактив, которое происходит между пользователем и веб-приложением. JavaScript — это высокоуровневый интерпретируемый язык программирования, который используется для добавления интерактивности, динамического поведения и функциональности на веб-страницы. Он широко применяется для разработки клиентской части веб-приложений и взаимодействия с пользователем. JavaScript позволяет создавать и изменять содержимое веб-страницы, обрабатывать события (например, щелчки мыши и нажатия клавиш), выполнять асинхронные запросы к серверу, анимировать элементы, валидировать данные форм и многое другое. JavaScript поможет нам переходить по страницам, использовать технологию Drag&Drop (хватай и бросай) и много другого разного функционала, требуемого в приложении.

Один из критериев выбора технологий – анализ рынка. Для того, чтобы провести анализ рынка на предмет технологий в сфере frontend-разработки, используем любой веб-сайт, с возможностью просмотра и выбора вакансий труда, например hh.ru (https://hh.ru/). Проанализировав вакансии в сфере frontend-разработки можно сделать вывод о том, что преобладающее количество вакансий рассматривают возможность трудоустройства разработчиков, имеющих знания и опыт разработки приложений, с использованием таких технологий, как HTML, CSS, JavaScript, WordPress, Tilda и соответствующих для языка программирования JavaScript фреймворках: VueJS (30% вакансий в сфере frontend-разработки), ReactJS (60% вакансий) и Angular (10% вакансий). Значительное преимущество в базовых навыках имеют вакансии с HTML, CSS и JavaScript в качестве основы.

В ходе проектирования архитектуры приложения было принято решение использовать не чистый язык программирования JavaScript, язык разметки HTML и язык стилей CSS, а фреймворки на базе языка JS.

Использование фреймворков для разработки веб-приложений предоставляет следующие преимущества:

1.	Ускорение разработки: Фреймворки предоставляют готовую архитектуру, набор инструментов и решений, которые упрощают процесс разработки. Они предлагают готовые модули, библиотеки и функции, что позволяет разработчикам сосредоточиться на бизнес-логике приложения, а не на написании базового кода.

2.	Согласованность и структура: Фреймворки часто предлагают строгую структуру и правила разработки, что способствует согласованности кода внутри проекта. Это делает приложение более поддерживаемым, понятным и легко масштабируемым.

3.	Повторное использование кода: Фреймворки позволяют создавать модули, компоненты и шаблоны, которые можно повторно использовать в разных частях приложения или даже в разных проектах. Это ускоряет разработку и облегчает сопровождение кода.

4.	Улучшенная безопасность: Многие фреймворки имеют встроенные механизмы для обеспечения безопасности, такие как предотвращение атак XSS (межсайтовый скриптинг) и CSRF (межсайтовая подделка запроса).

5.	Большое сообщество и поддержка: Популярные фреймворки имеют активное сообщество разработчиков, которое предлагает поддержку, документацию, учебные ресурсы и сторонние библиотеки. Это облегчает процесс изучения и разработки, а также предоставляет доступ к лучшим практикам и современным технологиям.

Стоит учитывать, что использование фреймворков может иметь и некоторые недостатки, такие как изучение новых концепций и ограничение свободы действий, связанное с использованием предопределенных структур и решений. Выбор фреймворка должен быть основан на потребностях проекта и опыте, и так как у нашего приложения присутствует заготовленная дизайн система и планы по взаимодействию с серверной частью (бэкендом) – выбор фреймворка в качестве основной технологии для разработки – это хорошее решение.

В качестве фреймворка для разработки веб-приложения был выбран ReactJS. ReactJS является одним из наиболее популярных фреймворков для разработки веб-приложений, и есть несколько причин, почему выбор остановился именно на ReactJS:

1.	Компонентная архитектура: ReactJS основан на компонентной модели, которая позволяет разбивать пользовательский интерфейс на небольшие, независимые и переиспользуемые компоненты. Это делает код более организованным, понятным, легко поддерживаемым и идеально сочетается с наличием дизайн системы, под которую можно создать и настроить нужным образом компоненты для дальнейшего переиспользования.

2.	Виртуальная DOM: ReactJS использует виртуальную DOM, что позволяет эффективно обновлять только необходимые части страницы при изменении данных. Это приводит к более быстрой отрисовке и улучшает производительность веб-приложений. Виртуальная DOM (Document Object Model) – это, проще говоря, копия реальной модели документа (веб-страницы). React создает её для того, чтобы отслеживать изменения которые произошли в ходе взаимодействия пользователя со страницей и выполнить сравнение виртуальной DOM и реальной, а замет обновить в реальной DOM только те элементы, которые в ходе сравнения были выявлены как измененные.

3.	Язык JSX: ReactJS предлагает JSX - расширение языка JavaScript, которое позволяет писать компоненты с использованием HTML-подобного синтаксиса. Это делает код более понятным и удобным для разработчиков.

 
(пример кода JSX)

4.	Однонаправленный поток данных: ReactJS поощряет структурирование приложения таким образом, чтобы данные передавались только в одном направлении, от родительских компонентов к дочерним компонентам. Этот подход делает управление состоянием приложения более предсказуемым и облегчает отслеживание изменений данных.

5.	Большое сообщество и экосистема: ReactJS имеет активное сообщество разработчиков, которое предлагает множество дополнительных библиотек, инструментов и ресурсов для упрощения разработки. Это облегчает изучение и ускоряет разработку проектов.

6.	React имеет не высокий порог вхождения новых разработчиков и обширную документацию и ресурсы: React имеет обширную и хорошо структурированную документацию, которая охватывает основные концепции, функции и методы. Кроме того, существуют множество учебных ресурсов, онлайн-курсов, видеоуроков и сообществ, которые помогают новым разработчикам изучить React и начать работу.

7.	Инструменты разработчика: React поддерживается широким набором инструментов, таких как React Developer Tools, которые облегчают отладку, инспекцию компонентов и отслеживание состояния приложения. Это помогает новым разработчикам быстрее разобраться с кодом и находить ошибки.

Существует также множество дополнительных инструментов и технологий для ускорения разработки. Одни из них – препроцессоры. Препроцессоры CSS — это инструменты, которые расширяют функциональность обычного CSS и позволяют разработчикам писать стилевые таблицы более эффективно и удобно. Они предоставляют дополнительные функции, такие как переменные, миксины, вложенные стили, операторы и другие возможности, которые не поддерживаются нативным (базовым) CSS.

Некоторые из популярных препроцессоров CSS:

1.	Sass (Syntactically Awesome Style Sheets): Sass предлагает мощные функции, такие как вложенные правила, миксины, наследование, операции с цветами и многое другое. Он использует синтаксис с расширением .scss и .sass.

2.	Less: Less также расширяет возможности CSS, предлагая переменные, миксины, операции с цветами и другие возможности. Он использует синтаксис с расширением .less.

3.	Stylus: Stylus предоставляет синтаксис с простыми и лаконичными правилами написания CSS. Он также поддерживает переменные, миксины и другие возможности.

Препроцессоры CSS помогают сделать код стилей более модульным, позволяют использовать повторяющиеся стили и облегчают его сопровождение и масштабирование. Они также облегчают разработку для различных устройств и браузеров, позволяя создавать динамические стили с использованием переменных и условных операторов. После написания кода на препроцессоре CSS он компилируется в обычный CSS, который затем используется на веб-страницах. Для разработки веб-приложения был выбран препроцессор SASS, так как является одним из самых популярных и удобных, а его функционал полностью покрывает наши потребности. С помощью этого препроцессора разработка и написание стилей для компонентов будут значительно ускорены.

Так как в нашем приложении предусмотрен переход между разными страницами стоит обратить внимание на библиотеки для роутинга. ReactJS имеет возможности для того, чтобы “отрисовывать” компоненты динамически – то есть находясь на одной и той же страничке возможно отображение абсолютно разного контента. Поэтому была возможность сделать приложение по типу SPA. SPA (Single Page Application) — это тип веб-приложения, которое загружает одну HTML-страницу и динамически обновляет ее содержимое без перезагрузки страницы при взаимодействии пользователя. В SPA весь код и ресурсы (такие как стили, скрипты, изображения) загружаются один раз при первоначальной загрузке, и дальнейшая навигация и взаимодействие происходят через асинхронные запросы на сервер или манипуляции с DOM. Но так как страницы нашего приложения имеют разный контент, была выбрана структура многостраничного приложения, вместо single page application. Это поможет пользователю легче ориентироваться на сайте и переходить на нужную страницу прямо через адресную строку. Для реализации роутинга и перехода между страницами в своем проекте мы использовали библиотеку React Router DOM.

React Router DOM предлагает такие положительные характеристики, как:

1.	Популярность и широкая поддержка: react-router-dom является одной из наиболее популярных и широко используемых библиотек для роутинга в React-приложениях. Она имеет активное сообщество разработчиков, что обеспечивает поддержку, обновления и регулярные исправления ошибок.

2.	Гибкость и мощные возможности: react-router-dom предоставляет гибкие и мощные инструменты для настройки и управления маршрутами в вашем приложении. Она позволяет определять маршруты с параметрами, вложенные маршруты, защищенные маршруты, а также предоставляет множество способов для перехода между страницами.


3.	Интеграция с React-экосистемой: react-router-dom разработана специально для работы с React и тесно интегрируется с другими библиотеками и инструментами React-экосистемы. Она хорошо сочетается с компонентным подходом React, позволяет использовать контекст и хуки React для управления состоянием маршрутизации.

4.	Хорошая документация и учебные ресурсы: Библиотека react-router-dom имеет хорошо структурированную документацию и обширное количество учебных ресурсов, таких как официальные руководства, примеры кода и сообщества разработчиков. Это облегчает изучение и использование библиотеки.

Все выбранные ранее технологии имеют декларативный подход. Декларативный подход — это парадигма программирования, в которой вы описываете желаемый результат или состояние, а не шаги, необходимые для достижения этого результата. Вместо явного указания шагов выполнения, вы объявляете, что должно произойти, и система сама заботится о реализации этого.

В контексте разработки веб-приложений, декларативный подход широко используется при работе с пользовательским интерфейсом. Вместо того, чтобы явно программировать каждое действие и изменение интерфейса, вы описываете, каким должен быть интерфейс в разных состояниях и событиях.

Примеры декларативного подхода в разработке веб-приложений:

HTML: HTML является декларативным языком разметки. Вы определяете структуру и содержимое веб-страницы, используя различные теги и атрибуты, а браузер заботится о рендеринге и отображении этой разметки.

CSS: CSS также использует декларативный подход. Вы описываете стили и внешний вид элементов веб-страницы, указывая селекторы, свойства и значения, и браузер применяет эти стили к соответствующим элементам.

React: React, фреймворк для разработки пользовательских интерфейсов, также поддерживает декларативный подход. Вы создаете компоненты, которые описывают, как должны выглядеть интерфейс в разных состояниях и событиях, а React обновляет интерфейс автоматически при изменении состояния компонента.

React Router DOM основана на декларативном подходе, который интегрируется хорошо с React и позволяет определять маршруты и переходы в виде компонентов. Это делает код более читабельным и понятным, а также облегчает разработку и поддержку приложения.


Декларативный подход упрощает разработку и поддержку кода, так как вам не нужно явно указывать все детали и шаги выполнения. Он позволяет сосредоточиться на описании желаемого состояния и результатов, делая код более читабельным, понятным и легким для сопровождения.

Одними из самых сложных, в плане реализации, элементов, являются карточки на странице веб-приложения. Все карточки на главной странице приложения поддерживают захват, перетаскивание, отпускание, нажатие и перекрытие. Перетаскивание элементов на веб-странице — это drag&drop. Для реализации подобного функционала понадобится библиотека, способная помочь в реализации функционала drag and drop, и выбор пал на React DND. Библиотека react-dnd является хорошим выбором для реализации функционала перетаскивания (drag and drop) по нескольким причинам:

1.	Простота использования: react-dnd предоставляет простой и интуитивно понятный API для реализации перетаскивания и сброса элементов. Она предоставляет компоненты высшего порядка (Higher Order Components, HOC) и крючки (hooks) для связи перетаскиваемых элементов с контейнерами и обработки событий перетаскивания.

2.	Гибкость и настраиваемость: react-dnd предлагает гибкую систему для определения различных типов перетаскиваемых элементов и контейнеров, а также возможность настраивать различные параметры и поведение перетаскивания, такие как ограничения перемещения, реакция на события мыши и т.д. Она поддерживает как простое перетаскивание элемента, так и более сложные функции, например, создание списков с возможностью перетаскивания элементов между ними.

3.	Совместимость с React: react-dnd является нативной библиотекой для React, что делает ее интеграцию в проект на React простой и естественной. Она хорошо сочетается с другими компонентами и библиотеками React, такими как Redux или React Router.

4.	Активное сообщество и поддержка: react-dnd имеет активное сообщество разработчиков, которое обеспечивает поддержку, обновления и исправление ошибок. Существует также обширная документация и руководства, а также множество примеров использования, что делает процесс изучения и использования библиотеки более легким.

5.	Популярность и практические применения: react-dnd является одной из наиболее популярных библиотек для реализации функционала перетаскивания в React-приложениях. Она успешно применяется во многих проектах и имеет хорошие отзывы от разработчиков.

В целом, react-dnd предлагает удобный и гибкий инструментарий для реализации функционала перетаскивания в React-приложениях. Она облегчает разработку и обеспечивает хороший пользовательский опыт при взаимодействии с элементами через перетаскивание.
